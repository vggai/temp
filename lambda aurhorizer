import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import java.util.HashMap;
import java.util.Map;

public class LambdaAuthorizer implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {

    @Override
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent request, Context context) {
        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();
        Map<String, String> headers = request.getHeaders();
        
        // Check if the Authorization header is present and has the correct value
        String expectedAuthToken = "expectedAuthTokenValue";
        if (headers != null && expectedAuthToken.equals(headers.get("Authorization"))) {
            // Generate an IAM policy to allow access
            response.setStatusCode(200);
            Map<String, Object> authResponse = new HashMap<>();
            authResponse.put("principalId", "user123"); // Unique identifier for the user
            Map<String, Object> policyDocument = new HashMap<>();
            policyDocument.put("Version", "2012-10-17");
            Map<String, Object> statementOne = new HashMap<>();
            statementOne.put("Action", "execute-api:Invoke");
            statementOne.put("Effect", "Allow");
            statementOne.put("Resource", "arn:aws:execute-api:region:accountId:apiId/stage/METHOD/RESOURCE"); // Specify your API ARN here
            policyDocument.put("Statement", new Object[] { statementOne });
            authResponse.put("policyDocument", policyDocument);
            response.setBody(authResponse.toString());
        } else {
            // Deny access
            response.setStatusCode(403);
            response.setBody("Unauthorized");
        }
        
        return response;
    }
}