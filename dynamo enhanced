To prevent the `UserRepository` from being initialized multiple times across different classes, you can follow a similar approach to the DynamoDB client by using a Singleton pattern or a static initialization block in a utility class. This ensures that only one instance of `UserRepository` is created and reused wherever needed.

### Singleton Pattern for `UserRepository`

Here's how you can implement the Singleton pattern for the `UserRepository`:

#### Modified `UserRepository.java`

```java
package com.example.lambda;

import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;

public class UserRepository {
    private static UserRepository instance;
    private final DynamoDbTable<User> userTable;

    private UserRepository() {
        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()
                .dynamoDbClient(DynamoDBClientProvider.getDynamoDbClient())
                .build();
        this.userTable = enhancedClient.table("User", TableSchema.fromBean(User.class));
    }

    public static synchronized UserRepository getInstance() {
        if (instance == null) {
            instance = new UserRepository();
        }
        return instance;
    }

    public void saveUser(User user) {
        userTable.putItem(user);
    }

    public User getUser(String userId) {
        return userTable.getItem(Key.builder().partitionValue(userId).build());
    }

    // Implement update and delete methods similarly
}
```

In this modification, `UserRepository` is changed to implement the Singleton pattern. The constructor is made private to prevent instantiation from outside the class, and a static method `getInstance()` is provided to get the instance of the repository.

### Using the Singleton `UserRepository` in Other Classes

When you need to use the `UserRepository` in other classes, you simply call the `getInstance()` method to get the already initialized instance. For example:

#### Example usage in `LambdaHandler.java`

```java
package com.example.lambda;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;

public class LambdaHandler implements RequestHandler<Object, String> {

    @Override
    public String handleRequest(Object input, Context context) {
        // Get the singleton instance of UserRepository
        UserRepository userRepository = UserRepository.getInstance();

        // Example usage
        User user = new User("1", "John Doe", "john.doe@example.com");
        userRepository.saveUser(user);

        // Retrieving the user
        User retrievedUser = userRepository.getUser("1");
        return "Retrieved user: " + retrievedUser.getName();
    }
}
```

This approach ensures that the `UserRepository` is initialized only once, regardless of how many times or from where it's accessed in your Lambda function. It's an effective way to reuse expensive resources like database connections, making your Lambda functions more efficient.