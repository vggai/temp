To demonstrate how to organize and write the code for a simple AWS Lambda function that utilizes a DynamoDB client across multiple files for CRUD operations, we will create a few Java classes. This example assumes you have basic knowledge of AWS Lambda and DynamoDB.

### 1. `DynamoDBClientProvider.java` - Utility class to provide a DynamoDB client

This utility class initializes a static DynamoDB client that can be reused across the Lambda execution context.

```java
package com.example.lambda;

import software.amazon.awssdk.services.dynamodb.DynamoDbClient;

public class DynamoDBClientProvider {
    private static final DynamoDbClient dynamoDbClient = DynamoDbClient.builder().build();

    public static DynamoDbClient getDynamoDbClient() {
        return dynamoDbClient;
    }
}
```

### 2. `User.java` - Model class representing a user entity

This is a simple POJO class that models the User entity corresponding to your DynamoDB table structure.

```java
package com.example.lambda;

public class User {
    private String userId;
    private String name;
    private String email;

    // Constructors
    public User() {}

    public User(String userId, String name, String email) {
        this.userId = userId;
        this.name = name;
        this.email = email;
    }

    // Getters and setters
    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
```

### 3. `UserRepository.java` - Repository class for user entity CRUD operations

This class abstracts the CRUD operations for the User entity.

```java
package com.example.lambda;

import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;

public class UserRepository {
    private final DynamoDbTable<User> userTable;

    public UserRepository() {
        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()
                .dynamoDbClient(DynamoDBClientProvider.getDynamoDbClient())
                .build();
        this.userTable = enhancedClient.table("User", TableSchema.fromBean(User.class));
    }

    public void saveUser(User user) {
        userTable.putItem(user);
    }

    public User getUser(String userId) {
        return userTable.getItem(Key.builder().partitionValue(userId).build());
    }

    // Implement update and delete methods similarly
}
```

### 4. `LambdaHandler.java` - AWS Lambda function handler

This is the entry point for the Lambda function.

```java
package com.example.lambda;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;

public class LambdaHandler implements RequestHandler<Object, String> {

    private final UserRepository userRepository = new UserRepository();

    @Override
    public String handleRequest(Object input, Context context) {
        // Example usage
        User user = new User("1", "John Doe", "john.doe@example.com");
        userRepository.saveUser(user);

        // Retrieving the user
        User retrievedUser = userRepository.getUser("1");
        return "Retrieved user: " + retrievedUser.getName();
    }
}
```

### Packaging and Deployment

- Package your Java code into a JAR file. If you're using Maven, you can achieve this with the `mvn package` command.
- Deploy the JAR file to AWS Lambda. You can do this through the AWS Management Console, AWS CLI, or your CI/CD pipeline.
- Set the handler information in the AWS Lambda configuration to `com.example.lambda.LambdaHandler::handleRequest`.

This setup demonstrates a simple but effective way to organize your AWS Lambda Java code for interacting with DynamoDB, following best practices for client reuse across multiple Lambda invocations.