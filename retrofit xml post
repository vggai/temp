To handle XML responses with Retrofit, you need to add a converter that can parse XML data, since Retrofit does not include XML parsing by default. The Simple XML Converter is commonly used for this purpose. Here's how to set it up and use it:

### Step 1: Add Dependencies

First, add the Retrofit and Simple XML Converter library dependencies to your `build.gradle` file. Ensure you use the latest versions available:

```gradle
implementation 'com.squareup.retrofit2:retrofit:2.9.0'
implementation 'com.squareup.retrofit2:converter-simplexml:2.9.0'
```

### Step 2: Define Your XML Response Model

Define your response model according to the structure of your XML response. For example, if your XML looks like this:

```xml
<user>
    <name>John Doe</name>
    <email>john@example.com</email>
</user>
```

You would define your model like this using annotations from the Simple framework (`org.simpleframework.xml`):

```java
import org.simpleframework.xml.Element;
import org.simpleframework.xml.Root;

@Root(name = "user")
public class User {
    @Element(name = "name")
    private String name;

    @Element(name = "email")
    private String email;

    // Constructor, getters, and setters
}
```

### Step 3: Create Retrofit Instance with XML Converter

When building your Retrofit instance, attach the Simple XML Converter to handle XML:

```java
import retrofit2.Retrofit;
import retrofit2.converter.simplexml.SimpleXmlConverterFactory;

public class ApiServiceGenerator {
    private static final String BASE_URL = "http://yourapi.com/api/";

    private static Retrofit.Builder builder
      = new Retrofit.Builder()
        .baseUrl(BASE_URL)
        .addConverterFactory(SimpleXmlConverterFactory.create());

    public static <S> S createService(Class<S> serviceClass) {
        Retrofit retrofit = builder.build();
        return retrofit.create(serviceClass);
    }
}
```

### Step 4: Define Your API Interface

Use Retrofit annotations to define your API interface:

```java
import retrofit2.Call;
import retrofit2.http.GET;

public interface ApiService {
    @GET("/users")
    Call<User> getUser();
}
```

### Step 5: Make a Request

Now, you can make a request to your API and receive XML responses:

```java
public class Main {
    public static void main(String[] args) {
        ApiService apiService = ApiServiceGenerator.createService(ApiService.class);
        
        Call<User> call = apiService.getUser();
        call.enqueue(new Callback<User>() {
            @Override
            public void onResponse(Call<User> call, Response<User> response) {
                if(response.isSuccessful()) {
                    User user = response.body();
                    System.out.println("User Name: " + user.getName() + ", Email: " + user.getEmail());
                } else {
                    System.err.println("Request Error :: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<User> call, Throwable t) {
                t.printStackTrace();
            }
        });
    }
}
```

Remember to perform network operations on a background thread if your environment requires it. Retrofit handles this for you with asynchronous calls (`enqueue`). The example above uses asynchronous execution to make the network call and process the response on a background thread.